{% extends '@layout/default.html.twig' %}

{% block title %}Home{% endblock %}

{% block content %}
<div class="jumbotron">
    <h1>Welcome to <span class="zf-green">OMG SOCKETS</span></h1>
    <p>It's running, this is good!</p>
</div>

<div class="row">
    <div class="col-md-12">
        <h1>Load balanced sockets server daemons</h1>
    </div>
</div>
{% set socketLimit = 10 %}
<div class="row">
    <div class="col-md-6">
        {% for i in 1..socketLimit %}
        <p>Socket #{{i}} has connected to node process <span id="socket-{{i}}"><i class="fa fa-spinner fa-spin"></i></span></p>
        {% endfor %}
        <p>
        </p>
    </div>
    <div class="col-md-6">
        <h2>Logs</h2>
        <ul id="log">
        </ul>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js"></script>
<script>

var addLog = (message) => {
    var logNode     = document.getElementById('log');
    var messageNode = document.createElement('li');
    messageNode.appendChild(document.createTextNode(message));
    logNode.insertBefore(messageNode, logNode.firstChild);
};
var logSocket  = io('ws://' + window.location.hostname + ':3000', {
    // Only use websockets, as the upgrade from long polling
    // is hard to stickily load balance
    transports: ['websocket']
});
logSocket.on('connect', () => {
    addLog('logsocket connected');
});
logSocket.on('global-log', (data) => {
    console.log('got global log');
    console.log(data);
    addLog(data);
});

var sockets = [];
for (let i = 1; i <= {{ socketLimit }}; i++) {
    let socket  = io('ws://' + window.location.hostname + ':3000', {
        // Only use websockets, as the upgrade from long polling
        // is hard to stickily load balance
        transports: ['websocket']
    });
    let socketName = 'socket-' + i;
    let domNode = document.getElementById('socket-' + i);

    socket.on('connect', () => {
        domNode.innerHTML = 'Connected';
        socket.emit('socket-log', {
            "name": socketName,
            "message": 'Connected'
        });
    });
    socket.on('connect_error', () => {
        domNode.innerHTML = 'Connection error';
    });
    socket.on('disconnect', () => {
        domNode.innerHTML = 'Disconnected';
    });
    socket.on('news', (data) => {
        domNode.innerHTML = data.socket_name;
    });
    sockets.push(socket);
}

</script>
{% endblock %}
