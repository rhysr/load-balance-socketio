worker_processes 4;

events { worker_connections 1024; }

http {
    upstream sockets {
        # Modifying socket.io to only use websockets, means that we don't
        # have to handle maintaining the backend connection stickiness when
        # upgrading long polling connections to websockets
        # The Sec-WebSocket-Key is a unique way of identifying each socket
        # which makes it great to use to split connections between backend processes
        # https://nginx.org/en/docs/http/ngx_http_upstream_module.html#hash
        hash $http_sec_websocket_key consistent;

        server socket01:3000;
        server socket02:3000;
        server socket03:3000;
        server socket04:3000;
        server socket05:3000;
    }

    server {
        listen 80;
        index index.php;
        root /var/www/html/public;

        location /socket.io {
            proxy_pass http://sockets;
            proxy_http_version 1.1;
            proxy_set_header Host $host;

            # For websockets to work, the Upgrade has to be set
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $http_connection;
        }

        location / {
            try_files $uri /index.php$is_args$args;
        }

        location ~ ^/index\.php(/|$) {
            fastcgi_pass fpm:9000;
            fastcgi_index index.php;
            include fastcgi_params;

            # Mitigate https://httpoxy.org/ vulnerabilities
            fastcgi_param HTTP_PROXY "";

            fastcgi_split_path_info ^(.+?\.php)(/.*)$;

            fastcgi_param DOCUMENT_ROOT   $realpath_root;
            fastcgi_param PATH_INFO       $fastcgi_path_info;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }

        location ~ \.php$ {
            return 404;
        }
    }
}
